trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality  + Nodes + Edges,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
default_glm_mod <- train(
form = NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength,
data = master_data,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
knn <- fread("removed_loops/output/knn_machine_learning.csv")
ggplot(knn, aes(y = Accuracy, x = K_Neighbors, color = TrainingData)) + geom_line()
View(knn)
ggplot(knn[!is.na(knn$Accuracy),], aes(y = Accuracy, x = K_Neighbors, color = TrainingData)) + geom_line()
mean(na.omit(knn$Accuracy))
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked$ID <- 1:nrow(ranked)
master <- melt(ranked, id.vars = "ID", variable.name = "category",
value.name="scores")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill")
?rfe
######## feature importance ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
MedianDegree <- fread("removed_loops/output/median_degree.csv")[, 5]
GiniCoefficients <- fread("removed_loops/output/gini_coefficients.csv")[, 5:9]
Constraint <- fread("removed_loops/output/constraint.csv")[, 5:6]
removed <- data.table(removed, MedianDegree, GiniCoefficients, Constraint)
removed <- na.omit(removed)
#### based on caret package
## transform Social,Offline and Social,Online into logical variables
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "1", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "0", removed[i, "NetworkDomain"])
}
}
removed$NetworkDomain <- as.factor(removed$NetworkDomain)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model_removed <- train(NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
# summarize importance
print(importance_removed)
# plot importance
a <- plot(importance_removed)
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked$ID <- 1:nrow(ranked)
master <- melt(ranked, id.vars = "ID", variable.name = "category",
value.name="scores")
b <- ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill")
grid.arrange(a, b)
?varImp
importance <- varImp(results_removed, scale=FALSE)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
importance <- varImp(results_removed, scale=FALSE)
print(importance)
print(importance)
# plot importance
a <- plot(importance_removed)
# summarize importance
print(importance_removed)
print(importance)
# plot importance
a <- plot(importance_removed)
b <- plot(importance)
grid.arrange(a, b)
# plot importance
a <- plot(importance_removed)
plot(importance)
plot(importance_removed)
?varImp
# estimate variable importance
importance_removed <- varImp(model_removed, scale=T)
# summarize importance
print(importance_removed)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
# summarize importance
print(importance_removed)
importance <- varImp(results_removed, scale=T)
print(importance)
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked$ID <- 1:nrow(ranked)
master <- melt(ranked, id.vars = "ID", variable.name = "category",
value.name="scores")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked$ID <- 1:nrow(ranked)
master <- melt(ranked, id.vars = "ID", variable.name = "category",
value.name="scores")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
# train the model
model_removed <- train(NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
######## feature importance ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
MedianDegree <- fread("removed_loops/output/median_degree.csv")[, 5]
GiniCoefficients <- fread("removed_loops/output/gini_coefficients.csv")[, 5:9]
Constraint <- fread("removed_loops/output/constraint.csv")[, 5:6]
removed <- data.table(removed, MedianDegree, GiniCoefficients, Constraint)
removed <- na.omit(removed)
#### based on caret package
## transform Social,Offline and Social,Online into logical variables
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "1", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "0", removed[i, "NetworkDomain"])
}
}
removed$NetworkDomain <- as.factor(removed$NetworkDomain)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model_removed <- train(NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
# summarize importance
print(importance_removed)
# plot importance
plot(importance_removed)
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked <- fread("removed_loops/output/feature_rank.csv")
ranked$ID <- 1:nrow(ranked)
master <- melt(ranked, id.vars = "ID", variable.name = "category",
value.name="scores")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + theme_bw()
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + ylab("Frequency") +
xlab("Rank") + labs(color = "Measure")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + ylab("Frequency") +
xlab("Rank") + labs(fill = "Measure")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + ylab("Frequency") +
xlab("") + labs(fill = "Measure")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + ylab("Frequency") +
xlab(" ") + labs(fill = "Measure")
ggplot(master, aes(x = category, fill = scores)) + geom_bar(position = "fill") + ylab("Frequency") +
xlab("") + labs(fill = "Measure")
?rfe
######## feature importance ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
MedianDegree <- fread("removed_loops/output/median_degree.csv")[, 5]
GiniCoefficients <- fread("removed_loops/output/gini_coefficients.csv")[, 5:9]
Constraint <- fread("removed_loops/output/constraint.csv")[, 5:6]
removed <- data.table(removed, MedianDegree, GiniCoefficients, Constraint)
removed <- na.omit(removed)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
#### based on caret package
## transform Social,Offline and Social,Online into logical variables
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "1", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "0", removed[i, "NetworkDomain"])
}
}
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
View(removed)
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
######## feature importance ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
MedianDegree <- fread("removed_loops/output/median_degree.csv")[, 5]
GiniCoefficients <- fread("removed_loops/output/gini_coefficients.csv")[, 5:9]
Constraint <- fread("removed_loops/output/constraint.csv")[, 5:6]
removed <- data.table(removed, MedianDegree, GiniCoefficients, Constraint)
removed <- na.omit(removed)
#### based on caret package
## transform Social,Offline and Social,Online into logical variables
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "1", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "0", removed[i, "NetworkDomain"])
}
}
removed$NetworkDomain <- as.factor(removed$NetworkDomain)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results_removed <- rfe(removed[,6:28], removed[[3]], sizes=c(1:4), rfeControl=control)
summary(results_removed)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model_removed <- train(NetworkDomain ~ GiniDegreeCount + GiniBetweenness + GiniTransitivity +
GiniEigenvectorCentrality + GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
summary(model_removed)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
# plot importance
plot(importance_removed)
########################
######## comparing number of edges and nodes before and after removing loops ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
MedianDegree <- fread("removed_loops/output/median_degree.csv")[, 5]
GiniCoefficients <- fread("removed_loops/output/gini_coefficients.csv")[, 5:9]
Constraint <- fread("removed_loops/output/constraint.csv")[, 5:6]
removed <- data.table(removed, MedianDegree, GiniCoefficients, Constraint)
removed <- na.omit(removed)
# load in diffusion results
diff_removed <- fread("removed_loops/diffusion/consolidated/1% starting_50% prob_50% threshold.csv")
diff_removed <- diff_removed[diff_removed$Name %in% removed$Name]
diff_removed2 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_50% threshold.csv")
diff_removed2 <- diff_removed2[diff_removed2$Name %in% removed$Name]
diff_removed3 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_70% threshold.csv")
diff_removed3 <- diff_removed3[diff_removed3$Name %in% removed$Name]
diff <- fread("output/diffusion/consolidated/10% starting_100% prob_70% threshold.csv")
diff <- diff[diff$Name %in% diff_removed$Name]
# add mean to measure table
removed$Mean <- diff_removed$Mean
removed$Mean2 <- diff_removed2$Mean
removed$Mean3 <- diff_removed3$Mean
master_data$Mean <- diff$Mean
glm_removed <- lm(cbind(Mean, Mean2, Mean3) ~  GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + GiniDegreeCount + GiniTransitivity +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges, data = removed)
glm_removed <- lm(cbind(Mean, Mean2, Mean3) ~  GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + GiniDegreeCount + GiniTransitivity +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges, data = removed)
summary(glm_removed)
anova(glm_removed)
glm_removed <- lm(scale(cbind(Mean, Mean2, Mean3)) ~  scale(GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + GiniDegreeCount + GiniTransitivity +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges, data = removed))
glm_removed <- lm(scale(cbind(Mean, Mean2, Mean3)) ~  scale(GiniCloseness + MeanConstraint + GiniConstraint +
MedianDegree + GiniDegreeCount + GiniTransitivity +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + GiniDegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges), data = removed)
summary(glm_removed)
apply(removed, 2, scale)
apply(removed[4:31], 2, scale)
apply(removed[4:31], 2, as.numeric)
apply(removed[4:31], 2, scale)
removed <- apply(removed[4:31], 2, as.numeric)
removed <- apply(removed[4:31], 2, scale)
knn <- fread("removed_loops/output/knn_machine_learning.csv")
ggplot(knn[!is.na(knn$Accuracy),], aes(y = Accuracy, x = K_Neighbors, color = TrainingData)) + geom_line()
# load in measures data
master_data <- fread("removed_loops/output/master_measures_removed_loops.csv")
master_data <- na.omit(master_data)
# load in diffusion results
D_1_50_50 <- fread("removed_loops/diffusion/consolidated/1% starting_50% prob_50% threshold.csv")
D_1_50_50 <- D_1_50_50[D_1_50_50$Name %in% master_data$Name]
D_1_100_50 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_50% threshold.csv")
D_1_100_50 <- D_1_100_50[D_1_100_50$Name %in% master_data$Name]
D_1_100_70 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_70% threshold.csv")
D_1_100_70 <- D_1_100_70[D_1_100_70$Name %in% master_data$Name]
D_5_50_70 <- fread("removed_loops/diffusion/consolidated/5% starting_50% prob_70% threshold.csv")
D_5_50_70 <- D_5_50_70[D_5_50_70$Name %in% master_data$Name]
D_5_100_70 <- fread("removed_loops/diffusion/consolidated/5% starting_100% prob_70% threshold.csv")
D_5_100_70 <- D_5_100_70[D_5_100_70$Name %in% master_data$Name]
######## install packages ########
list.of.packages <- c("data.table", "igraph", "jsonlite", "ggplot2", "gridExtra", "mlbench",
"caret", "e1071", "corrplot")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
# load in measures data
master_data <- fread("removed_loops/output/master_measures_removed_loops.csv")
master_data <- na.omit(master_data)
# load in diffusion results
D_1_50_50 <- fread("removed_loops/diffusion/consolidated/1% starting_50% prob_50% threshold.csv")
D_1_50_50 <- D_1_50_50[D_1_50_50$Name %in% master_data$Name]
D_1_100_50 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_50% threshold.csv")
D_1_100_50 <- D_1_100_50[D_1_100_50$Name %in% master_data$Name]
D_1_100_70 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_70% threshold.csv")
D_1_100_70 <- D_1_100_70[D_1_100_70$Name %in% master_data$Name]
D_5_50_70 <- fread("removed_loops/diffusion/consolidated/5% starting_50% prob_70% threshold.csv")
D_5_50_70 <- D_5_50_70[D_5_50_70$Name %in% master_data$Name]
D_5_100_70 <- fread("removed_loops/diffusion/consolidated/5% starting_100% prob_70% threshold.csv")
D_5_100_70 <- D_5_100_70[D_5_100_70$Name %in% master_data$Name]
master_data <- na.omit(master_data)
# add mean to measure table
master_data$D_1_50_50 <- D_1_50_50$Mean
master_data$D_1_100_50 <- D_1_100_50$Mean
master_data$D_1_100_70 <- D_1_100_70$Mean
master_data$D_5_50_70 <- D_5_50_70$Mean
master_data$D_5_100_70 <- D_5_100_70$Mean
summary(master_data)
master_data <- na.omit(master_data)
# run diffusion
source("R/removed_loops_diffusion_function.R")
# run diffusion
source("R/removed_loops_diffusion_function.R")
for(n in 3:10){
for(j in 1:nrow(master_data)){
simulate.removed.loops.diffusion(j = j, pct.starting.infected = 0.01, p.infection = 0.5, n = n,
threshold = 0.7)
}
}
for(n in 1:10){
for(j in 1:nrow(master_data)){
simulate.removed.loops.diffusion(j = j, pct.starting.infected = 0.001, p.infection = 1, n = n,
threshold = 0.5)
}
}
# install packages
list.of.packages <- c("data.table", "igraph", "dplyr")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
for(n in 1:10){
for(j in 1:nrow(master_data)){
simulate.removed.loops.diffusion(j = j, pct.starting.infected = 0.001, p.infection = 1, n = n,
threshold = 0.5)
}
}
