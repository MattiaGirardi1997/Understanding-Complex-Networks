print(importance)
# plot importance
plot(importance)
# train the model
model <- train(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="lm")
# estimate variable importance
importance <- varImp(model, scale=F)
# summarize importance
print(importance)
# plot importance
plot(importance)
# train the model
model <- train(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="glmboost")
# train the model
model <- train(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="glmboost")
# estimate variable importance
importance <- varImp(model, scale=F)
# summarize importance
print(importance)
# plot importance
plot(importance)
#### transform Social,Offline and Social,Online into logical variables
for(i in 1:length(master_measures_2$ID)){
if(master_measures_2[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
master_measures_2[i, "NetworkDomain"] <- gsub(".*", "1", master_measures_2[i, "NetworkDomain"])
} else {
master_measures_2[i, "NetworkDomain"] <- gsub(".*", "0", master_measures_2[i, "NetworkDomain"])
}
}
master_measures_2$NetworkDomain <- as.factor(master_measures_2$NetworkDomain)
master_measures_2 <- na.omit(master_measures_2)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model <- train(NetworkDomain ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="logitboost", preProcess="scale", trControl=control)
# train the model
model <- train(NetworkDomain ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="LogitBoost", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
# train the model
model <- train(NetworkDomain ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(master_measures_2[,6:21], master_measures_2[[22]], sizes=c(1:15), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
# ensure the results are repeatable
set.seed(7)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(master_measures_2[,6:21], master_measures_2[[3]], sizes=c(1:15), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
?rfecontrol
?rfeControl
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="boot", number=10)
# run the RFE algorithm
results <- rfe(master_measures_2[,6:21], master_measures_2[[22]], sizes=c(1:15), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
model <- lm(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity,
data=master_measures_2)
summary(model)
vif(model)
car::vif(model)
model <- lm(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=master_measures_2)
summary(model)
car::vif(model)
model <- glm(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=master_measures_2)
summary(model)
model <- lm(Mean ~ AverageComplexity + AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=master_measures_2)
summary(model)
car::vif(model)
# calculate correlation matrix
correlationMatrix <- cor(master_measures_2[,4:21])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff = 0.75)
# print indexes of highly correlated attributes
names(master_measures_2[,4:21])[print(highlyCorrelated)]
car::vif(model)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff = 0.5)
# print indexes of highly correlated attributes
names(master_measures_2[,4:21])[print(highlyCorrelated)]
car::vif(model)
results <- fread("output/diffusion/consolidated/results_1.csv")[, Mean]
master_measures_2 <- data.table(fread("output/undirected/master_measures_2.csv"), Mean = results)
master_measures_2 <- na.omit(master_measures_2)
master <- na.omit(master_measures_2)
ggplot(master, aes(x = AverageDegree, y = Mean)) + geom_line()
ggplot(master, aes(x = AverageDegree, y = Mean)) + geom_point()
ggplot(master, aes(x = AverageDegree, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master[AverageDegree < 500], aes(x = AverageDegree, y = Mean, color = NetworkDomain)) + geom_point()
View(master_measures_2)
names <- names(master)
names
ggplot(master, aes(x = names[4], y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = eval(parse(names[4])), y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = parse(names[4]), y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = names[4], y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = names[5], y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = master[, names[4]], y = Mean, color = NetworkDomain)) + geom_point()
names(master)
ggplot(master, aes(x = Edges, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Nodes, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AverageComplexity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AverageComplexity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Nodes, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AverageComplexity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AverageDegree, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AveragePathLength, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = AverageTransitivity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = BetweennessCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Closeness, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = ClosenessCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Closeness, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = ClosenessCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Complexity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = DegreeAssortativity, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = DegreeCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = DegreeDistribution, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Density, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = EigenvectorCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = EogenvectorCentrality_2, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = iogenvectorCentrality_2, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = EigenvectorCentrality_2, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = EigenvectorCentrality, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = EigenvectorCentrality_2, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = Entropy, y = Mean, color = NetworkDomain)) + geom_point()
ggplot(master, aes(x = GlobalTransitivity, y = Mean, color = NetworkDomain)) + geom_point()
accuracy <- seq(1:100)
accuracy <- 1:100
r1  <- fread("output/diffusion/consolidated/results_1.csv")
library(data.table)
library(ggplot2, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
r1  <- fread("output/diffusion/consolidated/results_1.csv")
r2  <- fread("output/diffusion/consolidated/results_2.csv")
r3  <- fread("output/diffusion/consolidated/results_3.csv")
r4  <- fread("output/diffusion/consolidated/results_4.csv")
r1  <- fread("output/diffusion/consolidated/results_1.csv")
r2  <- fread("output/diffusion/consolidated/results_2.csv")
r3  <- fread("output/diffusion/consolidated/results_3.csv")
r4  <- fread("output/diffusion/consolidated/results_4.csv")
g <- data.table(r1, r2$Mean, r3$Mean, r4$Mean)
View(g)
g <- data.table(r1, Mean2 = r2$Mean, Mean3 = r3$Mean, Mean4 = r4$Mean)
View(g)
data_long <- tidyr::gather(g, key = type_col, value = categories, -1:2)
-1:2
View(data_long)
View(g)
g <- g[, c(1:4, 15:18)]
View(g)
View(g)
data_long <- tidyr::gather(g, key = type_col, value = categories, -c("Name", "Domain", "Nodes", "Edges"))
ggplot(data_long, aes(x = '', y = categories, col = Name)) +
geom_point(position = "fill", stat = "identity")
ggplot(data_long, aes(x = '', y = categories)) +
geom_point(position = "fill", stat = "identity")
View(data_long)
ggplot(data_long, aes(x = tyoe_col, y = categories)) +
geom_point(position = "fill", stat = "identity")
ggplot(data_long, aes(x = type_col, y = categories)) +
geom_point(position = "fill", stat = "identity")
ggplot(data_long, aes(x = categories, y = Edges)) +
geom_point(position = "fill", stat = "identity")
ggplot(data_long, aes(x = categories, y = Nodes)) +
geom_point(position = "fill", stat = "identity")
ggplot(data_long, aes(x = categories, y = Nodes)) + geom_line()
ggplot(data_long, aes(x = Nodes, y = categories)) + geom_line()
ggplot(data_long, aes(x = Nodes, y = categories)) + geom_point()
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_point()
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_point(size = 2)
g <- na.omit(g)
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_point(size = 2)
data.long <- na.omit(data.long)
data_long <- na.omit(data_long)
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_point(size = 0.5)
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_point(size = 1)
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_line(size = 1)
ggplot(data_long, aes(x = Nodes, y = categories, color = type_col)) + geom_line(size = 0.5)
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)
#######
files
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", file[1]), row.names = F,
sep = ",")
files <- files[-c(1:10)]
}
file[1]
file[1]
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", files[1]), row.names = F,
sep = ",")
files <- files[-c(1:10)]
}
warnings()
files[1]
class(files[1])
?sprintf
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- files[1]
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
}
name <- files[1]
sprintf("output/diffusion/consolidated/%s.csv", name)
sprintf("output/diffusion/consolidated/%s.csv", name)
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
sprintf("output/diffusion/consolidated/%s.csv", name)
write.table(res_table, file = "output/diffusion/consolidated/output/diffusion/10% starting_100% prob_70% threshold_1.csv.csv", row.names = F,
sep = ",")
res_table
View(res_table)
res_table
write.table(res_table, file = "hello.csv", row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F, sep = ",")
write.table(res_table, file = "output/diffusion/consolidated/2.csv", row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated//%s.csv", name), row.names = F, sep = ",")
sprintf("output/diffusion/consolidated//%s.csv", name)
write.table(res_table, file = sprintf("output/diffusion/consolidated/\%s.csv", name), row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated/\\%s.csv", name), row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated\/%s.csv", name), row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated/h%s.csv", name), row.names = F, sep = ",")
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F, sep = ",")
name
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1", "", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1.", ".", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1.", ".", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1.", ".", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1\.", ".", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1.csv", ".csv", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
files <- list.files(path = "output/diffusion", pattern="*.csv", full.names=TRUE)[1:60]
names <- list.files(path = "output/diffusion", pattern="*.csv", full.names=FALSE)[1:60]
for(n in 1:6){
for(i in 1:10){
if(i == 1){
res_table <- fread(files[i])
} else {
res <- fread(files[i])[, sprintf("Iteration_%s", i) := Iterations_1][, 6]
res_table <- cbind(res_table, res)
}
}
name <- names[1]
name <- gsub("_1.csv", "", name)
res_table <- data.table(res_table[, 1:4], sapply(res_table[, 5:14], as.numeric))
res_table <- res_table[, Mean := rowMeans(res_table[, 5:14])]
write.table(res_table, file = sprintf("output/diffusion/consolidated/%s.csv", name), row.names = F,
sep = ",")
files <- files[-c(1:10)]
names <- names[-c(1:10)]
}
library(readr)
X10_starting_100_prob_70_threshold_1_csv <- read_csv("10% starting_100% prob_70% threshold_1.csv.csv")
View(X10_starting_100_prob_70_threshold_1_csv)
g <- fread("10% starting_100% prob_70% threshold_1.csv.csv")
g <- fread("output/diffusion/10% starting_100% prob_70% threshold_1.csv.csv")[]
View(g)
g <- fread("output/diffusion/10% starting_100% prob_70% threshold_1.csv.csv")[, 1:5]
save(g, file = "g.txt")
save(g, file = "g.csv")
write.table(g, file = "g.csv")
write.table(g, file = "g.csv", row.names = F, sep = ",")
