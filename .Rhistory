# load in network
file <- as.character(master_data[j, Name])
domain <- as.character(master_data[j, NetworkDomain])
edges <- master_data[j, number_edges]
el <- fread(sprintf("data/all_data/%s.csv", file))
# get number of nodes
nodes <- unique(c(el$Node1, el$Node2))
n.people <- length(nodes)
# create initial infection information
infected <- sample(
x = c(T, F),
size = n.people,
replace = T,
prob = c(pct.starting.infected, 1 - pct.starting.infected)
)
# ensure at least one node is infected
if(length(which(infected)) == 0){
infect <- sample(length(infected), size = 1)
infected[infect] <- TRUE
}
# ordering nodes
V_order <- sort(as.integer(nodes))
# create data frame of infection indices for each node
infected_data <- data.table(Nodes = V_order, infected = infected)
print(length(which(infected_data$infected))/length(infected_data$infected))
# remove some variables
rm(V_order)
ten.thousands <- 0
t <- 1
while(t < (runs+2)){
# select random edge
random.edge <- sample(nrow(el), size = 1)
el[random.edge]
c(infected_data[which(el[random.edge, Node1] == infected_data$Nodes), ],
infected_data[which(el[random.edge, Node2] == infected_data$Nodes), ])
# determine whether one of the edge's nodes are susceptible
if (infected_data[which(el[random.edge, Node1] == infected_data$Nodes), infected] !=
infected_data[which(el[random.edge, Node2] == infected_data$Nodes), infected]){
# detect susceptible node
who.susceptible <-  c(el[random.edge, Node1],el[random.edge, Node2])[!c(infected_data[el[random.edge, Node1] == infected_data$Nodes, infected],
infected_data[el[random.edge, Node2] == infected_data$Nodes, infected])]
# detect susceptible node
infected_data[who.susceptible == Nodes, infected := sample(
c(T, F),
size = 1,
prob = c(p.infection, 1 - p.infection)
)]
if(infected_data[who.susceptible == Nodes, infected] == TRUE){
el <- el[-random.edge]
}
} else if(infected_data[which(el[random.edge, Node1] == infected_data$Nodes),
infected] == TRUE &
infected_data[which(el[random.edge, Node2] == infected_data$Nodes),
infected] == TRUE){
el <- el[-random.edge]
}
print(length(which(infected_data$infected))/length(infected_data$infected))
# make sure loop does not run indefinitely
if((t + (ten.thousands*runs)) > (70*n.people)){
write.table(data.table(file, domain, n.people, edges, paste("limit:",length(which(infected_data$infected))/length(infected_data$infected))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
append = T, col.names = F)
break
}
# save required number of iterations needed to achieve 70% of nodes infected
if(length(which(infected_data$infected))/length(infected_data$infected) >= threshold){
if(j == 1){
write.table(data.table(Name = file, Domain = domain, Nodes = n.people, Edges = edges,
Iterations_1 = (t + (ten.thousands*runs))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
col.names = T)
} else {
write.table(data.table(file, domain, n.people, edges, (t + (ten.thousands*runs))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
append = T, col.names = F)
}
break
} else if(t == runs + 1){
ten.thousands <- ten.thousands + 1
t <- 1
}
t <- t + 1
}
}
n <- 6
for(j in 1:556){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
simulate.diffusion <- function(j, p.infection, pct.starting.infected, n, threshold, runs = 10000, master_data =
fread("output/undirected/master_measures_2.csv")[, c("Name", "NetworkDomain", "number_edges")]){
# load in network
file <- as.character(master_data[j, Name])
domain <- as.character(master_data[j, NetworkDomain])
edges <- master_data[j, number_edges]
el <- fread(sprintf("data/all_data/%s.csv", file))
# get number of nodes
nodes <- unique(c(el$Node1, el$Node2))
n.people <- length(nodes)
# create initial infection information
infected <- sample(
x = c(T, F),
size = n.people,
replace = T,
prob = c(pct.starting.infected, 1 - pct.starting.infected)
)
# ensure at least one node is infected
if(length(which(infected)) == 0){
infect <- sample(length(infected), size = 1)
infected[infect] <- TRUE
}
# ordering nodes
V_order <- sort(as.integer(nodes))
# create data frame of infection indices for each node
infected_data <- data.table(Nodes = V_order, infected = infected)
print(length(which(infected_data$infected))/length(infected_data$infected))
# remove some variables
rm(V_order)
ten.thousands <- 0
t <- 1
while(t < (runs+2)){
# select random edge
random.edge <- sample(nrow(el), size = 1)
el[random.edge]
c(infected_data[which(el[random.edge, Node1] == infected_data$Nodes), ],
infected_data[which(el[random.edge, Node2] == infected_data$Nodes), ])
# determine whether one of the edge's nodes are susceptible
if (infected_data[which(el[random.edge, Node1] == infected_data$Nodes), infected] !=
infected_data[which(el[random.edge, Node2] == infected_data$Nodes), infected]){
# detect susceptible node
who.susceptible <-  c(el[random.edge, Node1],el[random.edge, Node2])[!c(infected_data[el[random.edge, Node1] == infected_data$Nodes, infected],
infected_data[el[random.edge, Node2] == infected_data$Nodes, infected])]
# detect susceptible node
infected_data[who.susceptible == Nodes, infected := sample(
c(T, F),
size = 1,
prob = c(p.infection, 1 - p.infection)
)]
if(infected_data[who.susceptible == Nodes, infected] == TRUE){
el <- el[-random.edge]
}
} else if(infected_data[which(el[random.edge, Node1] == infected_data$Nodes),
infected] == TRUE &
infected_data[which(el[random.edge, Node2] == infected_data$Nodes),
infected] == TRUE){
el <- el[-random.edge]
}
print(length(which(infected_data$infected))/length(infected_data$infected))
# make sure loop does not run indefinitely
if((t + (ten.thousands*runs)) > (70*n.people)){
write.table(data.table(file, domain, n.people, edges, paste("limit:",length(which(infected_data$infected))/length(infected_data$infected))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
append = T, col.names = F)
break
}
# save required number of iterations needed to achieve 70% of nodes infected
if(length(which(infected_data$infected))/length(infected_data$infected) >= threshold){
if(j == 1){
write.table(data.table(Name = file, Domain = domain, Nodes = n.people, Edges = edges,
Iterations_1 = (t + (ten.thousands*runs))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
col.names = T)
} else {
write.table(data.table(file, domain, n.people, edges, (t + (ten.thousands*runs))),
file = sprintf("output/diffusion/diffusion_results_%s.csv", n), sep = ",", row.names = F,
append = T, col.names = F)
}
break
} else if(t == runs + 1){
ten.thousands <- ten.thousands + 1
t <- 1
}
t <- t + 1
}
}
n <- 6
for(j in 1:100){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
View(simulate.diffusion)
View(simulate.diffusion)
View(simulate.diffusion)
# load in function
source("R/diffusion_function.R")
# load in function
source("R/diffusion_function.R")
n <- 5
n <- 6
n <- 6
for(j in 1:100){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.1, n = n, threshold = 0.7)
}
n <- 6
for(j in 201:300){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.1, n = n, threshold = 0.7)
}
n <- 6
for(j in 301:400){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.1, n = n, threshold = 0.7)
}
diffusion_results_1 <- fread("output/diffusion/diffusion_results_1.csv")
diffusion_results_2 <- fread("output/diffusion/diffusion_results_2.csv")
diffusion_results_3 <- fread("output/diffusion/diffusion_results_3.csv")
diffusion_results_4 <- fread("output/diffusion/diffusion_results_4.csv")
diffusion_results_6 <- fread("output/diffusion/diffusion_results_6.csv")
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
rowMeans(master)
sapply(master, as.numeric)
master <- as.data.table(sapply(master, as.numeric))
rowMeans(master)
master <- data.table(master, rowMeans(master))
View(master)
names(master)
names(master) <- c("diff_1", "diff_2", "diff_3", "diff_4", "diff_6")
names(master) <- c("diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Mean")
View(master)
(min(master[, 1-4]) - master[5])
min(master[, 1-4])
master[, 1-4]
sapply(master, min(master[, 1-4]) - master[5])
sapply(master, (min(master[, 1-4]) - master[5]))
master <- data.table(master, rowMeans(master[, 1:4]))
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- as.data.table(sapply(master, as.numeric))
master <- data.table(master, rowMeans(master[, 1:4]))
names(master) <- c("diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Mean")
master$sub <-
lapply(master[, 1:4], min())
master$sub <-
lapply(master[, 1:4], min)
master$sub <-
sapply(master[, 1:4], min)
master[, 1:4]
list(master[, 1:4])
unlist(master[, 1:4])
master$sub <-
sapply(c(master$diff_1, master$diff_2, master$diff_3, master$diff_4), min)
c(master$diff_1, master$diff_2, master$diff_3, master$diff_4)
master$sub <- master$Mean - master$diff_6
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- as.data.table(sapply(master, as.numeric))
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- as.data.table(sapply(master[, -1], as.numeric))
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- data.table(master$V1, sapply(master[, -1], as.numeric))
master <- data.table(master, rowMeans(master[, 2:5]))
names(master) <- c("domain", "diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Mean")
master$sub <- master$Mean - master$diff_6
n <- 7
n <- 7
# run diffusion
set.seed(1234)
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
# load in function
source("R/diffusion_function.R")
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
View(master)
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
n <- 7
for(j in 1:1){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.05, n = n, threshold = 0.7)
}
View(diff_1)
View(diff_2)
diff_1 <- data.table(diff_1[, -4], diff_2$Edges, diff_1$Iterations_1)
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_1 <- data.table(diff_1[, -4], diff_2[, Edges], diff_1[, Iterations_1])
# load in function
source("R/diffusion_function.R")
write.table(diff_1, "output/diffusion/diffusion_results_7.csv", sep = ",", row.names = F)
library(readr)
X7th_graders <- read_csv("data/all_data/7th_graders.csv")
View(X7th_graders)
g <- graph_from_data_frame(fread("data/all_data/add_health_comm1.csv"))
assortativity_degree(g)
degreedist(g)
assortativity(g)
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
ggplot(diff_1, aes(x = Nodes))
ggplot(diff_1, aes(x = Nodes)) + geom_histogram()
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1)
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1, diff_1$Nodes)
View(master)
ggplot(master, aes(x = Nodes, y = master[, 2:5])) + geom_point
ggplot(master, aes(x = Nodes, y = master[, 2:5])) + geom_point()
names(master) <- c("domain", "diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Nodes")
ggplot(master, aes(x = Nodes, y = Iter)) + geom_point()
ggplot(master, aes(x = Nodes, Iterations)) + geom_point()
ggplot(master, aes(x = Nodes, y = Iterations)) + geom_point()
ggplot(master, aes(x = Nodes, y = Iterations_1)) + geom_point()
ggplot(master, aes(x = Nodes, y = diff_1)) + geom_point()
master <- sapply(master[, -1], as.numeric)
ggplot(master, aes(x = Nodes, y = diff_1)) + geom_point()
data.table(master$V1,
master <- data.table(master$V1, sapply(master[, -1], as.numeric))
master <- data.table(master$V1, sapply(master[, -1], as.numeric))
master <- data.table(master$V1, sapply(master[, -1], as.numeric))
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1, diff_1$Nodes)
names(master) <- c("domain", "diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Nodes")
master <- data.table(master$domain, sapply(master[, -1], as.numeric))
ggplot(master, aes(x = Nodes, y = diff_1)) + geom_point()
ggplot(master, aes(x = Nodes, y = c("diff_1", "diff_2")) + geom_point()
ggplot(master, aes(x = Nodes, y = c("diff_1", "diff_2"))) + geom_point()
ggplot(master, aes(x = Nodes, y = c("diff_1", "diff_2"))) + geom_point()
d <- melt(master, id.vars="domain")
d <- melt(master, id.vars="V1")
View(d)
ggplot(master, aes(x = Nodes, y = variable) + geom_point()
ggplot(master, aes(x = Nodes, y = variable)) + geom_point()
ggplot(master, aes(x = Nodes, y = variable)) + geom_point()
ggplot(d, aes(x = Nodes, y = variable)) + geom_point()
ggplot(d, aes(x = value, y = variable)) + geom_point()
d <- melt(master, id.vars=c("V1", "Nodes"))
View(d)
ggplot(d, aes(x = Nodes, y = variable)) + geom_point()
ggplot(d, aes(x = Nodes, y = value)) + geom_point()
ggplot(d, aes(x = Nodes, y = value, color = variable)) + geom_point()
ggplot(d[Nodes < 10000], aes(x = Nodes, y = value, color = variable)) + geom_point()
ggplot(d[Nodes < 30000], aes(x = Nodes, y = value, color = variable)) + geom_point()
View(master)
d <- melt(master[, -6], id.vars=c("V1", "Nodes"))
ggplot(d[Nodes < 30000], aes(x = Nodes, y = value, color = variable)) + geom_point()
View(d)
ggplot(d[Nodes < 30000], aes(x = Nodes, y = value, color = V1)) + geom_point()
ggplot(d[Nodes < 10000], aes(x = Nodes, y = value, color = V1)) + geom_point()
ggplot(d[Nodes < 1000], aes(x = Nodes, y = value, color = V1)) + geom_point()
ggplot(d[Nodes < 1000], aes(x = Nodes, y = value, color = V1)) + geom_point() + stat_smooth()
ggplot(d, aes(x = Nodes, y = value, color = V1)) + geom_point() + stat_smooth()
library(readr)
master_measures_2 <- read_csv("output/undirected/master_measures_2.csv")
View(master_measures_2)
master_measures_2 <- read_csv("output/undirected/master_measures_2.csv")
View(master_measures_2)
master_measures_2 <- data.table(master_measures_2[, 1:3], Nodes = diff_1$Nodes, master_measures_2[, 4:13]
master_measures_2 <- data.table(master_measures_2[, 1:3], Nodes = diff_1$Nodes, master_measures_2[, 4:13])
View(master_measures_2)
master_measures_2 <- read_csv("output/undirected/master_measures_2.csv")
master_measures_2 <- data.table(master_measures_2[, 1:3], nodes = diff_1$Nodes, master_measures_2[, 4:13])
View(master_measures_2)
write.table(master_measures_2, "output/undirected/master_measures_2.csv", sep = ",", row.names = F)
master_measures <- read_csv("output/undirected/master_measures_2.csv")
master_measures <- fread("output/undirected/master_measures_2.csv")
ggplot(master_measures, aes(x = nodes, y = value, color = V1)) + geom_point() + stat_smooth()
ggplot(master_measures, aes(x = nodes, y = number_edges, color = NetworkDomain)) + geom_point() + stat_smooth()
ggplot(master_measures, aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
ggplot(master_measures[nodes < 150000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[nodes < 150000])
nrow(master_measures[nodes < 140000])
ggplot(master_measures[nodes < 140000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[nodes < 140000])
nrow(master_measures[nodes < 100000])
ggplot(master_measures[nodes < 100000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[nodes < 120000])
nrow(master_measures[nodes < 110000])
nrow(master_measures[nodes < 105000])
nrow(master_measures[nodes < 109000])
nrow(master_measures[nodes < 110000])
nrow(master_measures[nodes < 120000])
nrow(master_measures[nodes < 110000])
nrow(master_measures[nodes < 115000])
nrow(master_measures[nodes < 114000])
ggplot(master_measures[nodes < 114000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[nodes < 114000])
ggplot(master_measures[nodes < 115000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[nodes < 115000])
nrow(master_measures[nodes < 114500])
nrow(master_measures[nodes < 114300])
nrow(master_measures[nodes < 114400])
nrow(master_measures[nodes < 114300])
nrow(master_measures[nodes < 114350])
nrow(master_measures[nodes < 114340])
nrow(master_measures[nodes < 150000])
nrow(master_measures[nodes < 100000])
diff_1 <- fread("output/diffusion/diffusion_results_1.csv")
diff_2 <- fread("output/diffusion/diffusion_results_2.csv")
diff_3 <- fread("output/diffusion/diffusion_results_3.csv")
diff_4 <- fread("output/diffusion/diffusion_results_4.csv")
diff_6 <- fread("output/diffusion/diffusion_results_6.csv")
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1, diff_1$Nodes, diff_1$Edges)
View(master)
names(master) <- c("domain", "diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Nodes", "Edges")
master <- data.table(master$domain, sapply(master[, -1], as.numeric))
View(master)
master <- data.table(domain = master$domain, sapply(master[, -1], as.numeric))
View(master)
master <- data.table(diff_1$Domain, diff_1$Iterations_1, diff_2$Iterations_1, diff_3$Iterations_1,
diff_4$Iterations_1, diff_6$Iterations_1, diff_1$Nodes, diff_1$Edges)
names(master) <- c("domain", "diff_1", "diff_2", "diff_3", "diff_4", "diff_6", "Nodes", "Edges")
master <- data.table(domain = master$domain, sapply(master[, -1], as.numeric))
View(master)
d <- melt(master[, -6], id.vars=c("domain", "Nodes", "Edges"))
ggplot(d, aes(x = Nodes, y = value, color = V1)) + geom_point() + stat_smooth()
ggplot(d, aes(x = Nodes, y = value, color = domain)) + geom_point() + stat_smooth()
ggplot(d, aes(x = Edges, y = value, color = domain)) + geom_point() + stat_smooth()
ggplot(d, aes(x = Nodes, y = value, color = domain)) + geom_point() + stat_smooth()
ggplot(d, aes(x = Edges, y = value, color = domain)) + geom_point() + stat_smooth()
ggplot(master_measures[edges < 550000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
master_measures[edges < 550000]
ggplot(master_measures[number_edges < 550000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
ggplot(master_measures, aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
ggplot(master_measures[number_edges < 550000 & nodes < 120000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
ggplot(master_measures[number_edges < 550000 & nodes < 100000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
nrow(master_measures[number_edges < 550000 & nodes < 100000])
table(master_measures[number_edges < 550000 & nodes < 100000, domain])
table(master_measures[number_edges < 550000 & nodes < 100000, NetworkDomain])
ggplot(master_measures[number_edges < 550000 & nodes < 100000], aes(x = nodes, y = number_edges, color = NetworkDomain)) +
geom_point()
table(master_measures$NetworkDomain)
m <- master_measures[number_edges < 550000 & nodes < 100000]
View(m)
master_data <-
fread("output/undirected/master_measures_2.csv")[number_edges < 550000 & nodes < 100000,
c("Name", "NetworkDomain", "number_edges")]
n <- 1
n <- 7
for(j in 1:273){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.1, n = n, threshold = 0.7)
}
#######
# load in function
source("R/diffusion_function.R")
master_data <-
fread("output/undirected/master_measures_2.csv")[number_edges < 550000 & nodes < 100000,
c("Name", "NetworkDomain", "number_edges")]
#######
# load in function
source("R/diffusion_function.R")
master_data <-
fread("output/undirected/master_measures_2.csv")[number_edges < 550000 & nodes < 100000,
c("Name", "NetworkDomain", "number_edges")]
n <- 7
for(j in 1:273){
simulate.diffusion(j = j, p.infection = 0.5, pct.starting.infected = 0.1, n = n, threshold = 0.7)
}
