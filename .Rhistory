######## comparing measure results ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
removed <- na.omit(removed)
ggplot(removed, aes(y = DegreeDistribution, x = log(Nodes), color = NetworkDomain)) + geom_point()
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "Social", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
ggplot(removed, aes(y = DegreeDistribution, x = log(Nodes), color = NetworkDomain)) + geom_point()
i <- 1
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
degree(net)
gini <- Gini(degree(net))
removed <- fread("removed_loops/output/gini_degree.csv")
View(removed)
i <- 192
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
degree(net)
max(degree(net))
View(removed)
data <- fread("removed_loops/output/master_measures_removed_loops.csv")
View(data)
median(degree(net))
mean(degree(net))
data <- fread("removed_loops/output/removed_loops_table.csv")
for(i in 1:nrow(data)){
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
median <- median(degree(net))
if(i == 1){
write.table(data.table(data[i, 1:4], Median = median), file = "removed_loops/output/median_degree.csv",
row.names = F, sep = ",")
} else {
write.table(data.table(data[i, 1:4], median), file = "removed_loops/output/median_degree.csv",
row.names = F, sep = ",", col.names = F, append = T)
}
rm(net, gini)
}
warnings()
removed <- fread("removed_loops/output/median_degree.csv")
ggplot(removed, aes(y = Median, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) + geom_point()
######## comparing measure results ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
removed <- na.omit(removed)
master_data <- fread("output/undirected/master_measures_2.csv")
master_data <- master_data[master_data$Name %in% removed$Name]
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "Social", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
# based on domain
grid.arrange(ggplot(removed, aes(x = Nodes, y = AverageDegree, color = NetworkDomain)) +
geom_point() + scale_x_log10() + scale_y_log10(), ggplot(master_data, aes(x = Nodes, y = AverageDegree,
color = NetworkDomain)) + geom_point()
+ scale_x_log10() + scale_y_log10())
########################
######## install packages ########
list.of.packages <- c("data.table", "igraph", "jsonlite", "ggplot2", "gridExtra", "mlbench",
"caret", "e1071", "corrplot")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
# based on domain
grid.arrange(ggplot(removed, aes(x = Nodes, y = AverageDegree, color = NetworkDomain)) +
geom_point() + scale_x_log10() + scale_y_log10(), ggplot(master_data, aes(x = Nodes, y = AverageDegree,
color = NetworkDomain)) + geom_point()
+ scale_x_log10() + scale_y_log10())
### Average Degree
ggplot() +
geom_point(data=removed,aes(x=Nodes, y=AverageDegree), color='green') +
geom_point(data=master_data, aes(x=Nodes, y=AverageDegree), color='red') +
scale_x_log10() + scale_y_log10()
# based on domain
grid.arrange(ggplot(removed, aes(x = Nodes, y = AverageDegree, color = NetworkDomain)) +
geom_point() + scale_x_log10() + scale_y_log10(), ggplot(master_data, aes(x = Nodes, y = AverageDegree,
color = NetworkDomain)) + geom_point()
+ scale_x_log10() + scale_y_log10())
### Average Degree
ggplot() +
geom_point(data=removed,aes(x=Nodes, y=AverageDegree), color='green') +
geom_point(data=master_data, aes(x=Nodes, y=AverageDegree), color='red') +
scale_x_log10() + scale_y_log10()
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) +
scale_x_log10() + scale_y_log10()
removed <- fread("removed_loops/output/median_degree.csv")
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) +
scale_x_log10() + scale_y_log10()
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain))
View(removed)
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain))
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) + geom_point() +
scale_x_log10() + scale_y_log10()
ggplot(removed, aes(y = Median, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = Median, x = log(Nodes), color = NetworkDomain)) + geom_point()
removed <- fread("removed_loops/output/median_degree.csv")
ggplot(removed, aes(y = log(Median), x = log(Nodes), color = NetworkDomain)) + geom_point()
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "Social", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
ggplot(removed, aes(y = log(Median), x = log(Nodes), color = NetworkDomain)) + geom_point()
data <- fread("removed_loops/output/removed_loops_table.csv")
for(i in 1:nrow(data)){
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
median <- median(degree(net))
if(i == 1){
write.table(data.table(data[i, 1:4], Median_degree = median), file = "removed_loops/output/median_degree.csv",
row.names = F, sep = ",")
} else {
write.table(data.table(data[i, 1:4], median), file = "removed_loops/output/median_degree.csv",
row.names = F, sep = ",", col.names = F, append = T)
}
rm(net, median)
}
removed <- fread("removed_loops/output/median_degree.csv")
ggplot(removed, aes(y = log(Median), x = log(Nodes), color = NetworkDomain)) + geom_point()
removed <- fread("removed_loops/output/median_degree.csv")
ggplot(removed, aes(y = log(Median), x = log(Nodes), color = NetworkDomain)) + geom_point()
View(removed)
ggplot(removed, aes(y = log(Median_degree), x = log(Nodes), color = NetworkDomain)) + geom_point()
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
library(data.table)
library(igraph)
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
?centralize()
library(data.table)
library(igraph)
library(DescTools)
library(ggplot2)
centr_betw(g, normalized = F)
data <- fread("removed_loops/output/master_measures_removed_loops.csv")
i <- 1
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
centr_betw(g, normalized = F)
centr_betw(g, normalized = T)
599.4959/10584
a <- centr_betw(g)$res
b <- centr_deg(g)$res
b <- centr_degree(g)$res
c <- centr_eigen(g)$res
centr_eigen(g)
c <- centr_eigen(g)$vector
d <- centr_clo(g)$res
m <- data.table(a, b, c, d)
centralize(m)
centralize(a)
centralize(b)
a <- centr_betw(g)$centralization
b <- centr_degree(g)$centralization
c <- centr_eigen(g)$centralization
d <- centr_clo(g)$centralization
m <- data.table(a, b, c, d)
View(m)
centralize(m)
centralize(a)
centralize(b)
a <- centr_betw(g)$res
centralize(a)
d <- centr_clo(g, mode = "total")$centralization
d <- centr_clo(g, mode = "all")$centralization
d <- centr_clo(g, mode = "in")$centralization
d <- centr_clo(g, mode = "out")$centralization
a <- centr_betw_tmax(g)
component_distribution(g)
components(g, mode = "weak")
components(g, mode = "strong")
i <- 2
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
components(g, mode = "strong")
components(g, mode = "weak")
i <- 40
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
components(g, mode = "weak")
component_distribution(g)
constraint(g)
Gini(centralize(a))
i <- 1
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
Gini(constraint(g))
i <- 2
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
Gini(constraint(g))
constraint(g)
sum(constraint(g))
i <- 1
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
sum(constraint(g))
i <- 3
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
sum(constraint(g))
constraint(g)
hierarchy(g)
blocks(g)
i <- 1
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
constraint(g)
sum(constraint(g))
constraint(g)
Gini(constraint(g))
i <- 2
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
constraint(g)
sum(constraint(g))
Gini(constraint(g))
i <- 1
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
constraint_sum <- sum(constraint(net))
constraint_gini <- Gini(constraint(net))
data.table(data[i, 1:4], constraint_sum, constraint_gini)
data <- fread("removed_loops/output/removed_loops_table.csv")
data <- fread("removed_loops/output/removed_loops_table.csv")
for(i in 1:nrow(data)){
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
constraint_sum <- sum(constraint(net))
constraint_gini <- Gini(constraint(net))
if(i == 1){
write.table(data.table(data[i, 1:4], constraint_sum, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",")
} else {
write.table(data.table(data[i, 1:4], constraint_sum, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",", col.names = F, append = T)
}
rm(net, constraint_gini, constraint_sum)
}
removed <- fread("removed_loops/output/constraint.csv")
removed <- fread("removed_loops/output/constraint.csv")
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] == "Social,Offline"){
removed[i, "NetworkDomain"] <- gsub(".*", "Offline", removed[i, "NetworkDomain"])
} else if (removed[i, NetworkDomain] == "Social,Online") {
removed[i, "NetworkDomain"] <- gsub(".*", "Online", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_gini, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_sum, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_sum, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = log(constraint_sum), x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = log(constraint_sum), x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = log(constraint_sum), x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_sum, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = log(constraint_gini), x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
data <- fread("removed_loops/output/removed_loops_table.csv")
for(i in 1:nrow(data)){
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
constraint_sum <- mean(constraint(net))
constraint_gini <- Gini(constraint(net))
if(i == 1){
write.table(data.table(data[i, 1:4], constraint_mean, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",")
} else {
write.table(data.table(data[i, 1:4], constraint_mean, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",", col.names = F, append = T)
}
rm(net, constraint_gini, constraint_sum)
}
data <- fread("removed_loops/output/removed_loops_table.csv")
for(i in 1:nrow(data)){
name <- data[i, Name]
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
net <- graph_from_data_frame(net, directed = F)
constraint_mean <- mean(constraint(net))
constraint_gini <- Gini(constraint(net))
if(i == 1){
write.table(data.table(data[i, 1:4], constraint_mean, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",")
} else {
write.table(data.table(data[i, 1:4], constraint_mean, constraint_gini), file = "removed_loops/output/constraint.csv",
row.names = F, sep = ",", col.names = F, append = T)
}
rm(net, constraint_gini, constraint_sum)
}
warnings()
removed <- fread("removed_loops/output/constraint.csv")
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] == "Social,Offline"){
removed[i, "NetworkDomain"] <- gsub(".*", "Offline", removed[i, "NetworkDomain"])
} else if (removed[i, NetworkDomain] == "Social,Online") {
removed[i, "NetworkDomain"] <- gsub(".*", "Online", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_mean, x = Nodes, color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_mean, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_gini, x = log(Nodes), color = NetworkDomain)) + geom_point()
ggplot(removed, aes(y = constraint_mean, x = log(Nodes), color = NetworkDomain)) + geom_point()
fread("removed_loops/output/constraint.csv")[, 6]
View(removed)
########################
######## comparing number of edges and nodes before and after removing loops ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
median <- fread("removed_loops/output/median_degree.csv")[, 5]
gini_degree <- fread("removed_loops/output/gini_degree.csv")[, 5]
gini_transitivity <- fread("removed_loops/output/gini_transitivity.csv")[, 5]
constraint_mean <- fread("removed_loops/output/constraint.csv")[, 5]
constraint_gini <- fread("removed_loops/output/constraint.csv")[, 6]
removed <- data.table(removed, median, gini_d = gini_degree, gini_t = gini_transitivity, constraint_gini,
constraint_mean)
View(removed)
removed <- na.omit(removed)
## split domains into Social and Non-Social
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "Social", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "Non-Social", removed[i, "NetworkDomain"])
}
}
### Gini Constraint
# based on domain
ggplot(removed, aes(x = Nodes, y = constraint_gini, color = NetworkDomain)) +
geom_point() + scale_x_log10() + scale_y_log10()
### Mean Constraiint
# based on domain
ggplot(removed, aes(x = Nodes, y = constraint_mean, color = NetworkDomain)) +
geom_point() + scale_x_log10() + scale_y_log10()
# train the model
model_removed <- train(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
########################
######## install packages ########
list.of.packages <- c("data.table", "igraph", "jsonlite", "ggplot2", "gridExtra", "mlbench",
"caret", "e1071", "corrplot")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model_removed <- train(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
########################
######## comparing number of edges and nodes before and after removing loops ########
removed <- fread("removed_loops/output/master_measures_removed_loops.csv")
median <- fread("removed_loops/output/median_degree.csv")[, 5]
gini_degree <- fread("removed_loops/output/gini_degree.csv")[, 5]
gini_transitivity <- fread("removed_loops/output/gini_transitivity.csv")[, 5]
constraint_mean <- fread("removed_loops/output/constraint.csv")[, 5]
constraint_gini <- fread("removed_loops/output/constraint.csv")[, 6]
removed <- data.table(removed, median, gini_d = gini_degree, gini_t = gini_transitivity, constraint_gini,
constraint_mean)
removed <- na.omit(removed)
#### based on caret package
## transform Social,Offline and Social,Online into logical variables
for(i in 1:nrow(removed)){
if(removed[i, NetworkDomain] %in% c("Social,Offline", "Social,Online")){
removed[i, "NetworkDomain"] <- gsub(".*", "1", removed[i, "NetworkDomain"])
} else {
removed[i, "NetworkDomain"] <- gsub(".*", "0", removed[i, "NetworkDomain"])
}
}
# train the model
model_removed <- train(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
View(removed)
removed$NetworkDomain <- as.factor(removed$NetworkDomain)
# train the model
model_removed <- train(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
data=removed, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance_removed <- varImp(model_removed, scale=FALSE)
# summarize importance
print(importance_removed)
plot(importance_removed)
# load in diffusion results
diff_removed <- fread("removed_loops/diffusion/consolidated/1% starting_50% prob_50% threshold.csv")
diff_removed <- diff_removed[diff_removed$Name %in% removed$Name]
diff_removed2 <- fread("removed_loops/diffusion/consolidated/1% starting_100% prob_50% threshold.csv")
diff_removed2 <- diff_removed2[diff_removed2$Name %in% removed$Name]
diff <- fread("output/diffusion/consolidated/10% starting_100% prob_70% threshold.csv")
# add mean to measure table
removed$Mean <- diff_removed$Mean
removed$Mean2 <- diff_removed2$Mean
glm_removed <- glm(Mean ~  constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges, data = removed)
summary(glm_removed)
glm_removed2 <- glm(Mean2 ~  constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges, data = removed)
summary(glm_removed2)
View(removed)
#### logistic regression model
network_glm_2 <- glm(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
family = binomial, data = removed)
summary(network_glm_2)
glm.probs <- predict(network_glm_2,type = "response")
mean(glm.probs)
glm.pred <- ifelse(glm.probs > 0.5, "TRUE", "FALSE")
master_measures_2 <- na.omit(master_measures_2)
pred <- table(glm.pred, master_measures_2$NetworkDomain)
(pred[1] + pred[4])/length(master_measures_2$NetworkDomain)
#### logistic regression model ####
#### load in master
master_measures_2 <- removed
master_measures_2 <- na.omit(master_measures_2)
pred <- table(glm.pred, master_measures_2$NetworkDomain)
glm.pred <- ifelse(glm.probs > 0.5, "TRUE", "FALSE")
master_measures_2 <- na.omit(master_measures_2)
pred <- table(glm.pred, master_measures_2$NetworkDomain)
glm.probs <- predict(network_glm_2,type = "response")
mean(glm.probs)
glm.pred <- ifelse(glm.probs > 0.5, "TRUE", "FALSE")
master_measures_2 <- na.omit(master_measures_2)
pred <- table(glm.pred, master_measures_2$NetworkDomain)
#### logistic regression model
network_glm_2 <- glm(NetworkDomain ~ constraint_mean + constraint_gini +
Median_degree + gini_t.Gini + gini_d.Gini +
AverageDegree + AveragePathLength +
AverageTransitivity + BetweennessCentrality + Closeness + ClosenessCentrality +
Complexity + DegreeAssortativity + DegreeCentrality + DegreeDistribution +
Density + EigenvectorCentrality + EigenvectorCentrality_2 + Entropy +
GlobalTransitivity + Nodes + Edges,
family = binomial, data = master_measures_2)
glm.probs <- predict(network_glm_2,type = "response")
mean(glm.probs)
glm.pred <- ifelse(glm.probs > 0.5, "TRUE", "FALSE")
master_measures_2 <- na.omit(master_measures_2)
pred <- table(glm.pred, master_measures_2$NetworkDomain)
(pred[1] + pred[4])/length(master_measures_2$NetworkDomain)
library(data.table)
library(igraph)
library(DescTools)
library(ggplot2)
data <- fread("removed_loops/output/master_measures_removed_loops.csv")
i <-1
net <- fread(sprintf("removed_loops/data/%s.csv", data[i, Name]))
g <- graph_from_data_frame(net, directed = F)
Gini(degree(net))
Gini(degree(g))
Gini(centr_degree(g)$res)
