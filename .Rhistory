library(igraph)
?degree
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram()
# install packages
list.of.packages <- c("data.table", "corrplot", "ggplot2")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
# load in measures
measures <- fread("output/master_measures.csv")
# deleting projection networks
measures <- measures[-c(97:101, 102:103, 188:190, 392, 428, 430:541)]
# correlation matrix
cor <- cor(measures[, 4:14], use = "complete.obs")
corrplot(cor)
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram()
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity")
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
aggregate(measures[, 4:14], measures$NetworkDomain, mean)
measures$NetworkDomain
aggregate(measures[, 4:14], as.vector(measures$NetworkDomain), mean)
aggregate(measures[, 4:14], list(measures$NetworkDomain), mean)
mean_all <- aggregate(measures[, 4:14], list(measures$NetworkDomain), mean)
View(mean_all)
ggplot(mean_all, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
setnames(mean_all, "Group.1", "NetworkDomain")
ggplot(mean_all, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain, y = AverageDegree)) + geom_bar(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain, y = AverageDegree)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain)) + geom_boxplot(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot(position = "identity",
alpha = 0.5)
ggplot(mean_all, aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot()
ggplot(measures, aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot()
ggplot(measures[AverageDegree < 1000], aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot()
ggplot(measures[AverageDegree < 900], aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot()
ggplot(measures[AverageDegree < 300], aes(x = NetworkDomain, y = AverageDegree)) + geom_boxplot()
ggplot(measures, aes(x = NetworkDomain, y = GlobalTransitivity)) + geom_boxplot()
ggplot(measures, aes(x = NetworkDomain, y = GlobalTransitivity)) + geom_bar()
ggplot(measures, aes(x = GlobalTransitivity)) + geom_bar()
ggplot(measures, aes(x = GlobalTransitivity)) + geom_histogram()
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
mean_all2 <- aggregate(na.omit(measures[, 4:14]), list(measures$NetworkDomain), mean)
?aggregate
#
ggplot(measures, aes(x = AverageDegree, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLenght, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = Closeness, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = DegreeAssortativity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = DegreeDisrtribution, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = DegreeDistribution, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = Density, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = EigenvectorCentrality, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
#
ggplot(measures, aes(x = AverageDegree, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_density(alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, color = NetworkDomain)) + geom_density(alpha = 0.5)
ggplot(measures, aes(x= Density)) + geom_bar
ggplot(measures, aes(x= Density)) + geom_bar()
mosaicplot(table(measures$NetworkDomain, measures$AverageDegree))
mosaicplot(table(measures$NetworkDomain, measures$AverageDegree, color = T))
mosaicplot(table(measures$NetworkDomain, measures$AverageDegree, color = T))
mosaicplot(table(measures$NetworkDomain, measures$AverageDegree), color = T)
mosaicplot(table(mean_all$NetworkDomain, mean_all$AverageDegree), color = T)
ggplot(measures, aes(x= Density, fill = NetworkDomain)) + geom_bar()
ggplot(measures, aes(x= Density, fill = NetworkDomain)) + geom_bar(position="fill", stat="identity")
library(igraph)
ggplot(measures, aes(x = Closeness, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = NetworkDomain, y = AverageTransitivity)) + geom_oxplot
ggplot(measures, aes(x = NetworkDomain, y = AverageTransitivity)) + geom_boxplot
ggplot(measures, aes(x = NetworkDomain, y = AverageTransitivity)) + geom_boxplot()
measures[NetworkDomain == "Social,Offline"]
measures[NetworkDomain == "Social,Offline", AverageTransitivity]
mean(measures[NetworkDomain == "Social,Offline", AverageTransitivity])
View(measures)
mean(measures[NetworkDomain == "Social,Offline", AverageTransitivity])
m1 <- na.omit(measures)
mean(measures[NetworkDomain == "Social,Offline", AverageTransitivity])
# load in measures
measures <- fread("output/master_measures.csv")
# deleting projection networks
measures <- measures[-c(97:101, 102:103, 188:190, 229, 392, 428, 430:541)]
m1 <- na.omit(measures)
mean(measures[NetworkDomain == "Social,Offline", AverageTransitivity])
mean_all <- aggregate(measures[, 4:14], list(measures$NetworkDomain), mean)
OLP_complete <. fread("input/import_datasets/OLP_complete.csv")[, c("title", "graphProperties")]
OLP_complete <- fread("input/import_datasets/OLP_complete.csv")[, c("title", "graphProperties")]
View(OLP_complete)
OLP_complete <- fread("input/import_datasets/OLP_complete.csv")
View(OLP_complete)
OLP_complete <- fread("input/import_datasets/OLP_complete.csv")[, c("title", "description", "graphProperties")]
View(OLP_complete)
mean(measures[NetworkDomain == "Social,Offline", AverageTransitivity])
# correlation matrix
cor <- cor(measures[, 4:14], use = "complete.obs")
corrplot(cor)
?degree.distribution
load("~/Desktop/Bachelor Thesis/code/bachelor_thesis/data/ICON_data/diseasome_shared.rda")
degree.distribution(diseasome_shared)
g <- graph_from_data_frame(diseasome_shared, directed = F)
degree.distribution(g)
degree(g
degree(g)
degree(g)
degree.distribution(g)
degree(g)
order(degree(g))
degree(g)
degree.distribution(g)
degree.distribution(g)
degree(g)
23.5*20
V(g)
degree(g)
degree.distribution(g)
degree(g)
max(degree(g))
data.frame(degree(g))
a <- data.frame(degree(g))
View(a)
rm(a)
eigen_centrality(g)
eigen_centrality(g)$vector
library(readr)
aids_blogs_2005_ <- read_csv("data/OLP_data/aids_blogs_(2005).csv")
View(aids_blogs_2005_)
g <- graph_from_data_frame(aids_blogs_2005_, directed = F)
eigen_centrality(g)$vector
var(eigen_centrality(g)$vector)
g <- graph_from_data_frame(aids_blogs_2005_, directed = T)
var(eigen_centrality(g)$vector)
g <- graph_from_data_frame(aids_blogs_2005_, directed = F)
var(eigen_centrality(g)$vector)
#' Convert .csv object to igraph object
#'
#' @param network Network name as a .csv object (corresponds to network_name)
#' @return igraph object
#' @export
#' @import igraph
create.igraph.object.OLP <- function(network, i, OLP_data =
fread("input/import_datasets/OLP_essentials.csv")){
graph_from_data_frame(network[, 1:2], directed = FALSE)
}
#' Compute several network measures of a complex network.
#'
#' @param igraph.network Network as an igraph object.
#' @param i Network index
#' @return ID, Network Name, Network Domain, Reciprocity, Degree Distribution, Transitivity, Degree Assortativity, Betweenness, Closeness,
#' Average Path Lenght, Hierarchy, Density
#' @export
#' @import data.table
compute.OLP.measures <- function(igraph.network, i, OLP_data = fread("input/import_datasets/OLP_essentials.csv")){
ID <- i
num_edges <- OLP_data[i, number_edges]
network_name <- as.character(OLP_data[i, "network_name"])
domain <- as.character(OLP_data[i, "networkDomain"])
mean_degree <- mean(degree(igraph.network, normalized = T))
if(mean_degree == 0){
mean_degree <- NA
}
avg_path_length <- average.path.length(igraph.network)
if(avg_path_length == 0){
avg_path_length <- NA
}
trnstvty_average <- transitivity(igraph.network, type = "average")
if(trnstvty_average == 0){
trnstvty_average <- NA
}
clsness <- var(closeness(igraph.network, normalized = T))
if(clsness == 0){
clsness <- NA
}
degree_assortativity <- assortativity.degree(igraph.network)
if(degree_assortativity == 0){
degree_assortativity <- NA
}
degree_distr <- var(degree_distribution(igraph.network))
if(degree_distr == 0){
degree_distr <- NA
}
edge_dens <- edge_density(igraph.network)
if(edge_dens == 0){
edge_dens <- NA
}
eigenv <- var(eigen_centrality(igraph.network)$vector)
if(eigenv == 0){
eigenv <- NA
}
trnstvty_global <- transitivity(igraph.network, type = "global")
if(trnstvty_global == 0){
trnstvty_global <- NA
}
measures <- data.frame(ID = ID, Name = network_name, numeber_edges = num_edges, NetworkDomain = domain, AverageDegree = mean_degree,
AveragePathLength = avg_path_length, AverageTransitivity = trnstvty_average,
Closeness = clsness, DegreeAssortativity = degree_assortativity,
DegreeDistribution = degree_distr, Density = edge_dens, EigenvectorCentrality = eigenv,
GlobalTransitivity = trnstvty_global)
return(measures)
}
g <- create.igraph.object.OLP(aids_blogs_2005_)
compute.OLP.measures(g)
compute.OLP.measures(g, 1)
library(readr)
OLP_measures_2 <- read_csv("output/undirected/OLP_measures_2.csv")
View(OLP_measures_2)
?geom_density
ggplot(measures, aes(x = AverageDegree, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures[AverageDegree <300], aes(x = AverageDegree, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures[AverageDegree < 100], aes(x = AverageDegree, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures[AverageDegree < 10], aes(x = AverageDegree, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures[AveragePathLength], aes(x = AveragePathLength, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AveragePathLength, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_density(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_density(alpha = 0.5)
ggplot(measures, aes(x = AverageTransitivity, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x =Betweenness, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures[Closeness < 0.0001], aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures[Closeness < 0.001], aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures[Closeness < 0.0002], aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures[Closeness < 0.00000001], aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures[Closeness < 0.0000001], aes(x = Closeness, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = DegreeAssortativity, fill = NetworkDomain)) + geom_density()
ot(measures, aes(x = DegreeAssortativity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = DegreeAssortativity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = DegreeDistribution, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = Density, fill = NetworkDomain)) + geom_density()
ggplot(measures[Density < 0.01], aes(x = Density, fill = NetworkDomain)) + geom_density()
ggplot(measures[Density < 0.1], aes(x = Density, fill = NetworkDomain)) + geom_density()
ggplot(measures[Density < 1], aes(x = Density, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = EigenvectorCentrality, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_density()
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity",
alpha = 0.5)
ggplot(measures, aes(x = GlobalTransitivity, fill = NetworkDomain)) + geom_histogram(position = "identity")
# load in Netzschleuder data
netzschleuder_files <- list.files(path = "data/netzschleuder_data", pattern="*.csv", full.names=T)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
# install packages
list.of.packages <- c("data.table", "igraph", "jsonlite")
sapply(list.of.packages, library, character.only = TRUE)
rm(list.of.packages)
# load in Netzschleuder data
netzschleuder_files <- list.files(path = "data/netzschleuder_data", pattern="*.csv", full.names=T)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
View(netzschleuder_essentials)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
View(netzschleuder_essentials)
for(i in 187:length(netzschleuder_essentials$network_name)){
name <- as.character(netzschleuder_essentials[i, network_name])
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
NS.network.measures(netzschleuder_network, i, path = "output/undirected/netzschleuder_measures_2.csv")
rm(netzschleuder_network)
}
####### Netzschleuder data (612 networks)
# load in functions
source("R/netzschleuder_functions.R")
# load in Netzschleuder data
netzschleuder_files <- list.files(path = "data/netzschleuder_data", pattern="*.csv", full.names=T)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
for(i in 187:length(netzschleuder_essentials$network_name)){
name <- as.character(netzschleuder_essentials[i, network_name])
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
NS.network.measures(netzschleuder_network, i, path = "output/undirected/netzschleuder_measures_2.csv")
rm(netzschleuder_network)
}
warnings()
library(readr)
added_networks_essentials <- read_csv("input/import_datasets/added_networks_essentials.csv")
View(added_networks_essentials)
####### added networks
# load in functions
source("R/ICON_functions.R")
# load in ICON data
added_networks <- fread("input/import_datasets/added_networks.csv")
# load in ICON data
added_networks <- fread("input/import_datasets/added_networks_Essentials.csv")
added_networks_files <- list.files(path = "data/added_networks", pattern="*.csv", full.names=TRUE)
####### added networks
# load in functions
source("R/ICON_functions.R")
# load in ICON data
added_networks <- fread("input/import_datasets/added_networks_Essentials.csv")
added_networks_files <- list.files(path = "data/added_networks", pattern="*.csv", full.names=TRUE)
View(added_networks)
# compute network measure for added networks (with ICON functions)
for(i in 1:length(added_networks_files)){
added_network <- fread(added_networks_files[i])
igraph.network <- create.igraph.object.ICON(added_network, i, ICON_data = fread("input/import_datasets/added_networks.csv"))
measures <- compute.ICON.measures(igraph.network, i, ICON_data = fread("input/import_datasets/added_networks.csv"))
append.ICON.measures(measures, i, path = "output/undirected/added_networks_measures.csv")
rm(added_network, igraph.network, measures)
}
# compute network measure for added networks (with ICON functions)
for(i in 1:length(added_networks_files)){
added_network <- fread(added_networks_files[i])
igraph.network <- create.igraph.object.ICON(added_network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
measures <- compute.ICON.measures(igraph.network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
append.ICON.measures(measures, i, path = "output/undirected/added_networks_measures.csv")
rm(added_network, igraph.network, measures)
}
# compute network measure for added networks (with ICON functions)
for(i in 7:length(added_networks_files)){
added_network <- fread(added_networks_files[i])
igraph.network <- create.igraph.object.ICON(added_network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
measures <- compute.ICON.measures(igraph.network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
append.ICON.measures(measures, i, path = "output/undirected/added_networks_measures.csv")
rm(added_network, igraph.network, measures)
}
length(added_networks_files)
# compute network measure for added networks (with ICON functions)
for(i in 40:length(added_networks_files)){
added_network <- fread(added_networks_files[i])
igraph.network <- create.igraph.object.ICON(added_network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
measures <- compute.ICON.measures(igraph.network, i, ICON_data = fread("input/import_datasets/added_networks_essentials.csv"))
append.ICON.measures(measures, i, path = "output/undirected/added_networks_measures.csv")
rm(added_network, igraph.network, measures)
}
rary(igraph)
library(data.table)
library(dplyr)
for(i in 1:113){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
# load in Netzschleuder data
netzschleuder_files <- list.files(path = "data/netzschleuder_data", pattern="*.csv", full.names=T)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
btw <- c()
names <- c()
domains <- c()
for(i in 1:113){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
library(igraph)
library(data.table)
library(dplyr)
library(ggplot2)
# load in Netzschleuder data
netzschleuder_files <- list.files(path = "data/netzschleuder_data", pattern="*.csv", full.names=T)
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
btw <- c()
names <- c()
domains <- c()
for(i in 1:113){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 113:132){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 114:114){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 133:133){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 134:151){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 152:152){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 153:154){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
for(i in 155:168){
name <- as.character(netzschleuder_essentials[i, network_name])
names <- combine(names, name)
domain <- as.character(netzschleuder_essentials[i, networkDomain])
domains <- combine(domains, domain)
netzschleuder_network <- fread(sprintf("data/netzschleuder_data/%s.csv", name))
graph <- graph_from_data_frame(netzschleuder_network, directed = F)
score <- var(betweenness(graph, normalized = T))
btw <- combine(btw, score)
rm(name, netzschleuder_network, graph, score)
write.table(data.frame(names, domains, btw), file = "output/undirected/btw.csv", row.names = F, sep = ",")
}
library(readr)
netzschleuder_measures_2 <- read_csv("output/undirected/netzschleuder_measures_2.csv")
View(netzschleuder_measures_2)
View(netzschleuder_measures_2)
library(readr)
master_measures_2 <- read_csv("output/undirected/master_measures_2.csv")
View(master_measures_2)
#### load in datasets
netzschleuder_essentials <- fread("input/import_datasets/netzschleuder_essentials.csv")
ICON_data <- fread("input/import_datasets/ICON_data.csv")
OLP_essentials <- fread("input/import_datasets/OLP_essentials.csv")
added_networks_essentials <- fread("input/import_datasets/added_networks_essentials.csv")
